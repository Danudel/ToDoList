{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lioz/Desktop/Web course Dana/\\u05EA\\u05E8\\u05D2\\u05D9\\u05DC\\u05D9\\u05DD \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/todolist/src/components/ToDoList.js\";\nimport React from 'react';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkedItem = index => {\n      this.setState({\n        listArr: this.state.listArr.map(item => {\n          if (item.index == index) {\n            item.done = !item.done;\n          }\n\n          return item;\n        })\n      });\n    };\n\n    this.handleRemove = id => {\n      //  if (this.state.listContent[id].done=== false){\n      //  alert(\"Are you sure you want to delete this item?\")\n      //  }\n      console.log(id);\n      this.setState({\n        listArr: this.state.listArr.splice(id, 1)\n      });\n    };\n\n    this.state = {\n      newItem: \"\",\n      indexCounter: 0,\n      listArr: []\n    };\n    this.addItem = this.addItem.bind(this);\n  } //Adding item to the TO DO LIST\n\n\n  addItem(event) {\n    const newValue = document.getElementById(\"newItemValue\").value;\n    const addedItem = {\n      index: this.state.indexCounter,\n      value: newValue,\n      done: false\n    };\n    this.setState({\n      listArr: this.state.listArr.concat(addedItem),\n      indexCounter: this.state.indexCounter + 1\n    });\n  } //check item as \"done\" by checking the checkbox\n\n\n  render() {\n    const fullList = [];\n    let trueCounter = 0; //counts how many items is undone\n    // loop that insert the array of list in the list. checking the counter of undone items\n\n    for (let i = 0; i < this.state.listArr.length; i++) {\n      const listContent = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"     \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checkedDefault: this.state.listArr[i].done,\n          onChange: () => this.checkedItem(this.state.listArr[i].index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [this.state.listArr[i].value, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"    \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => this.handleRemove(i),\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n\n      fullList.push(listContent);\n\n      if (this.state.listArr[i].done == false) {\n        trueCounter++;\n      }\n    } // if all items done- congratulate the user\n\n\n    let counterContent;\n\n    if (trueCounter === 0) {\n      counterContent = \"Well done! you finished all of your tasks!\";\n    } else {\n      counterContent = trueCounter + \" more tasks to do! you can do it!\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newItemValue\",\n        placeholder: \"Enter task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addItem,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: fullList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: counterContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Undone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ToDoList;","map":{"version":3,"sources":["/home/lioz/Desktop/Web course Dana/תרגילים להגשה/todolist/src/components/ToDoList.js"],"names":["React","ToDoList","Component","constructor","props","checkedItem","index","setState","listArr","state","map","item","done","handleRemove","id","console","log","splice","newItem","indexCounter","addItem","bind","event","newValue","document","getElementById","value","addedItem","concat","render","fullList","trueCounter","i","length","listContent","push","counterContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            newItem: \"\",\n            indexCounter: 0,\n            listArr: [],\n        }\n        this.addItem = this.addItem.bind(this);\n    }\n\n    //Adding item to the TO DO LIST\n    addItem(event) {\n        const newValue = document.getElementById(\"newItemValue\").value;\n        const addedItem = { index: this.state.indexCounter, value: newValue, done: false };\n        this.setState({ listArr: this.state.listArr.concat(addedItem), indexCounter: this.state.indexCounter + 1 })\n    }\n\n\n    //check item as \"done\" by checking the checkbox\n    checkedItem = (index) => {\n        this.setState({\n            listArr: this.state.listArr.map((item) => {\n                if (item.index == index) { item.done = !item.done }\n                return item;\n            })\n        });\n    }\n\n\n    //removes item from the list\n    //checking firt if the item is done or not\n    // NOT WORKING!\n    handleRemove = (id) => {\n        //  if (this.state.listContent[id].done=== false){\n        //  alert(\"Are you sure you want to delete this item?\")\n        //  }\n        console.log(id)\n        this.setState({\n            listArr: this.state.listArr.splice(id, 1)\n        });\n    }\n\n\n    render() {\n        const fullList = [];\n        let trueCounter = 0;  //counts how many items is undone\n\n        // loop that insert the array of list in the list. checking the counter of undone items\n        for (let i = 0; i < this.state.listArr.length; i++) {\n            const listContent = (\n                <li>     <input type=\"checkbox\" checkedDefault={this.state.listArr[i].done} onChange={() => this.checkedItem(this.state.listArr[i].index)} />\n                    <span>{this.state.listArr[i].value} </span>\n                    <span>    </span>\n                    <button type=\"button\" onClick={() => this.handleRemove(i)}>x</button>\n\n                </li>\n            )\n            fullList.push(listContent);\n            if (this.state.listArr[i].done == false) {\n                trueCounter++;\n            }\n        }\n\n        // if all items done- congratulate the user\n        let counterContent;\n        if (trueCounter === 0) {\n            counterContent = \"Well done! you finished all of your tasks!\";\n\n        }\n        else {\n            counterContent = trueCounter + \" more tasks to do! you can do it!\";\n        }\n\n\n\n\n        return (\n            <div>\n                <h1>To Do List</h1>\n\n                <input id=\"newItemValue\" placeholder=\"Enter task\">\n                </input>\n                <button onClick={this.addItem}>Add</button>\n                <ul>\n                    {fullList}\n                </ul>\n\n                <h3>{counterContent}</h3>\n                <button>All</button>\n                <button>Done</button>\n                <button>Undone</button>\n            </div>\n        );\n    }\n\n\n}\n\n\n\nexport default ToDoList;\n\n"]},"metadata":{},"sourceType":"module"}