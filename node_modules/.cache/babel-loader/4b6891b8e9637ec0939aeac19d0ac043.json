{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lioz/Desktop/Web course Dana/\\u05EA\\u05E8\\u05D2\\u05D9\\u05DC\\u05D9\\u05DD \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/todolist/src/components/ToDoList.js\";\nimport React from 'react';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkedItem = index => {\n      this.setState({\n        listArr: this.state.listArr.map(item => {\n          if (item.index == index) {\n            item.done = !item.done;\n          }\n\n          return item;\n        })\n      });\n    };\n\n    this.state = {\n      indexCounter: 0,\n      listArr: []\n    };\n    this.addItem = this.addItem.bind(this); //   this.doneItems = this.doneItems.bind(this);\n  } //Adding item to the TO DO LIST\n\n\n  addItem(event) {\n    const newValue = document.getElementById(\"newItemValue\").value;\n    const addedItem = {\n      index: this.state.indexCounter,\n      value: newValue,\n      done: false\n    };\n    this.setState({\n      listArr: this.state.listArr.concat(addedItem),\n      indexCounter: this.state.indexCounter + 1\n    });\n    document.getElementById(\"newItemValue\").value = '';\n  } //check item as \"done\" by checking the checkbox\n\n\n  //removes item from the list\n  //checking first if the item is done or not\n  // NOT WORKING!\n  //handleRemove = (id) => {\n  //  if (this.state.listContent[id].done=== false){\n  //  alert(\"Are you sure you want to delete this item?\")\n  //  }\n  // console.log(id)\n  //  this.setState({\n  //     listArr: this.state.listArr.splice(id,1)\n  //  });\n  // }\n  //filter only the items that marked as done\n  // doneItems(){\n  //  this.setState({\n  //       listArr: this.state.listArr.filter(this.state.listArr.done==true).map()\n  //   });\n  //  }\n  render() {\n    const fullList = [];\n    let trueCounter = 0; //counts how many items is undone\n    // loop that insert the array of list in the list. checking the counter of undone items\n\n    for (let i = 0; i < this.state.listArr.length; i++) {\n      let listContent = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"     \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checkedDefault: this.state.listArr[i].done,\n          onChange: () => this.checkedItem(this.state.listArr[i].index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [this.state.listArr[i].value, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.handleRemove(i),\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n\n      fullList.push(listContent);\n\n      if (this.state.listArr[i].done == false) {\n        trueCounter++;\n      }\n    } // if all items are done- congratulate the user\n\n\n    let counterContent;\n\n    if (trueCounter === 0) {\n      counterContent = \"Well done! you finished all of your tasks!\";\n    } else {\n      counterContent = trueCounter + \" more tasks to do! you can do it!\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newItemValue\",\n        placeholder: \"Enter task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addItem,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: fullList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: counterContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Undone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default ToDoList;","map":{"version":3,"sources":["/home/lioz/Desktop/Web course Dana/תרגילים להגשה/todolist/src/components/ToDoList.js"],"names":["React","ToDoList","Component","constructor","props","checkedItem","index","setState","listArr","state","map","item","done","indexCounter","addItem","bind","event","newValue","document","getElementById","value","addedItem","concat","render","fullList","trueCounter","i","length","listContent","handleRemove","push","counterContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            indexCounter: 0, \n            listArr: []\n        }\n        this.addItem=this.addItem.bind(this);\n     //   this.doneItems = this.doneItems.bind(this);\n    }\n\n    //Adding item to the TO DO LIST\n      addItem(event){\n          const newValue = document.getElementById(\"newItemValue\").value;\n          const addedItem = { index: this.state.indexCounter, value: newValue, done: false};\n          this.setState({ \n                        listArr: this.state.listArr.concat(addedItem), indexCounter: this.state.indexCounter+1,\n                        })\n          document.getElementById(\"newItemValue\").value= '';\n      }\n\n\n      //check item as \"done\" by checking the checkbox\n    checkedItem = (index) => {\n        this.setState({\n            listArr: this.state.listArr.map((item) => {\n                if (item.index == index) { item.done = !item.done }\n                return item;\n            })\n        });\n    }\n\n\n    //removes item from the list\n    //checking first if the item is done or not\n    // NOT WORKING!\n    //handleRemove = (id) => {\n      //  if (this.state.listContent[id].done=== false){\n          //  alert(\"Are you sure you want to delete this item?\")\n      //  }\n     // console.log(id)\n      //  this.setState({\n       //     listArr: this.state.listArr.splice(id,1)\n      //  });\n   // }\n\n        //filter only the items that marked as done\n       // doneItems(){\n\n          //  this.setState({\n         //       listArr: this.state.listArr.filter(this.state.listArr.done==true).map()\n         //   });\n      //  }\n\n\n        render() {\n            const fullList= [];\n            let trueCounter = 0;  //counts how many items is undone\n\n            // loop that insert the array of list in the list. checking the counter of undone items\n            for(let i=0; i<this.state.listArr.length; i++){\n               let listContent=(\n                   <li>     <input type=\"checkbox\" checkedDefault={this.state.listArr[i].done} onChange={() => this.checkedItem(this.state.listArr[i].index)} /> \n                            <span>{this.state.listArr[i].value} </span>\n                       <button type=\"button\" onClick={this.handleRemove(i)}>x</button>\n\n                    </li>\n               )\n                fullList.push(listContent);\n                if (this.state.listArr[i].done == false) { \n                    trueCounter++; \n                }\n            }\n\n            // if all items are done- congratulate the user\n            let counterContent;\n            if (trueCounter === 0) {\n              counterContent=\"Well done! you finished all of your tasks!\";\n               \n            }\n            else{\n                counterContent = trueCounter+ \" more tasks to do! you can do it!\";\n            }\n\n\n\n\n            return (\n                <div>\n                    <h1>To Do List</h1>\n\n                        <input id=\"newItemValue\" placeholder=\"Enter task\">\n                        </input>\n                        <button  onClick={this.addItem}>Add</button>\n                        <ul>\n                            {fullList}\n                        </ul>\n\n                 <h3>{counterContent}</h3>\n                <button>All</button>\n                <button >Done</button>\n                <button>Undone</button>\n                </div>\n            );\n        }\n    \n\n}\n\n\n\nexport default ToDoList;\n\n"]},"metadata":{},"sourceType":"module"}